package gitgui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

public class GitStatus implements Runnable{
	
	private InputStream ip;
	private PrintStream printstream;
	
	public GitStatus(InputStream ip) {
		super();
		this.ip = ip;
		try {
			printstream = new PrintStream(new FileOutputStream(new File("./src/logs/GitStatus-"+System.currentTimeMillis()+".txt")), true);
			System.setOut(printstream);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void run() {
		String status = "", temp;
		BufferedReader reader = new BufferedReader(new InputStreamReader(ip));
		
		try {
			while ((temp = reader.readLine()) != null) {
				status += temp;
			}
			
			Pattern p = Pattern.compile("nothing to commit, working tree clean");
			Matcher m = p.matcher(status);
			
			if (m.find()) {
				JOptionPane.showMessageDialog(null, "Nothing to commit, working tree clean", "Git GUI", 1);
			}
			
			p = Pattern.compile("Changes not staged for commit");
			Pattern p1 = Pattern.compile("Untracked files");
			m = p.matcher(status);
			Matcher m1 = p1.matcher(status);
			Pattern file1 = Pattern.compile("\\s*modified:\\s*.+s");
			
			if (m.find() || m1.find()) {
				JOptionPane.showMessageDialog(null, "Changes present to be staged", "Git GUI", 1);
				
			}
			
		} catch (Exception e) {
			e.printStackTrace(printstream);
		}
	}

}
