package gitgui;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JComboBox;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JButton;

public class GitMerge extends JFrame {

	private JPanel contentPane;
	private PrintStream printstream;
	private JFrame frame;
	private String directory;
	private String branches[];

	/**
	 * Create the frame.
	 */
	public GitMerge(String directory) {
		setTitle("Git GUI");
		try {
			frame = this;
			this.directory = directory;
			printstream = new PrintStream(new FileOutputStream(new File("./src/logs/GitMerge-"+System.currentTimeMillis()+".txt")), true);
			System.setOut(printstream);
		} catch(Exception e) {
			e.printStackTrace();
		}
		initialize();
	}

	private void initialize() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 476, 231);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		boolean isWindows = System.getProperty("os.name")
				.toLowerCase().startsWith("windows");
		try {				
			ProcessBuilder builder = new ProcessBuilder();
			builder.directory(new File(directory)); 
			if (isWindows) {
				builder.command("cmd", "/c", "git branch");
			}
			else {
				builder.command("sh", "-c", "git branch");
			}
			
			Process process = builder.start();
			int exitCode = process.waitFor();
			assert exitCode == 0;
			
			BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
			String message, temp;
			message = "";
			
			while ((temp = br.readLine()) != null) {
				message += temp + "\n";
			}
			br.close();
			branches = message.split("\n");
			process.destroy();
		} catch (Exception e) {
			e.printStackTrace(printstream);
		}
		
		JComboBox comboBox = new JComboBox();
		comboBox.setFont(new Font("Tahoma", Font.PLAIN, 14));
		comboBox.setBounds(10, 54, 192, 35);
		contentPane.add(comboBox);
		
		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setFont(new Font("Tahoma", Font.PLAIN, 14));
		comboBox_1.setBounds(260, 54, 192, 35);
		contentPane.add(comboBox_1);
		
		JLabel lblTo = new JLabel("to");
		lblTo.setHorizontalAlignment(SwingConstants.CENTER);
		lblTo.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblTo.setBounds(205, 67, 45, 13);
		contentPane.add(lblTo);
		
		JLabel lblFromBranch = new JLabel("From branch");
		lblFromBranch.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblFromBranch.setBounds(10, 30, 115, 13);
		contentPane.add(lblFromBranch);
		
		JLabel lblToBranch = new JLabel("To branch");
		lblToBranch.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblToBranch.setBounds(260, 32, 115, 13);
		contentPane.add(lblToBranch);
		
		JButton btnMerge = new JButton("Merge");
		btnMerge.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnMerge.setBounds(117, 125, 87, 29);
		contentPane.add(btnMerge);
		
		JButton btnCancel = new JButton("Cancel");
		btnCancel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnCancel.setBounds(260, 125, 94, 29);
		contentPane.add(btnCancel);
		frame.setLocationRelativeTo(null);;
	}
}
