/**
 * Class opening repository
 *
 * @author Shubhangi 
 * @date 11/11/2018
 *
 */

package gitgui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

public class OpenRepoStream implements Runnable {
	private InputStream es; //InputStream instance to retrieve error stream 
	private InputStream ip; //InputStream instance to retrieve input stream 
	private List<JButton> btn; //list of buttons on the main frame
	private JMenu mnGit; //git menu button
	private JLabel branch_name; //label to display branch name
	private PrintStream printstream; //PrintStream object; used to direct console output
	private JTextArea textArea; //Textarea to display text
	
	//constructor to initialize instance variables
	public OpenRepoStream(InputStream ip, InputStream es, List<JButton> btn, JMenu mnGit, JTextArea textArea, JLabel branch_name) {
		super();
		this.es = es;
		this.btn = btn;
		this.mnGit = mnGit;
		this.textArea = textArea;
		this.ip = ip;
		this.branch_name = branch_name;
		try {
			printstream = new PrintStream(new FileOutputStream(new File("./src/logs/OpenRepoStream-"+System.currentTimeMillis()+".txt")), true);
			System.setOut(printstream);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	//Function for opening repository 
	@Override
	public void run() {
		try {
			String status = "", temp;
			BufferedReader reader = new BufferedReader(new InputStreamReader(ip));
			
			while ((temp = reader.readLine()) != null) {
				status += temp;
			}
			reader.close();
			Pattern p = Pattern.compile("On branch [a-zA-Z0-9-[!@#$%^&*(),.?\":{}|<>_]]+(Y|N)"); //regex for taking branch name
			Matcher m = p.matcher(status); 
			
			String out;
			
			//checks if valid repository and enables buttons, menues
			if((out = new BufferedReader(new InputStreamReader(es)).readLine()) == null) {
				for (JButton x : btn) {
					x.setEnabled(true);
				}
				mnGit.setEnabled(true);
				textArea.setText("");
				if (m.find()) {
					branch_name.setText(m.group().substring(0, m.group().length()-1));
				}
			}
			else if(!out.isEmpty()) {
				JOptionPane.showMessageDialog(null, "Not a Git Repository", "Git GUI", 0);
				for (JButton x : btn) {
					x.setEnabled(false);
				}
				mnGit.setEnabled(false);
				textArea.setText("");
			}
		} catch (Exception e) {
			e.printStackTrace(printstream);
		}
	}
}
